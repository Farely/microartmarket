// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210601201240_Test1")]
    partial class Test1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ArtTagArtWork", b =>
                {
                    b.Property<int>("ArtWorksId")
                        .HasColumnType("integer");

                    b.Property<int>("TagsArtTagId")
                        .HasColumnType("integer");

                    b.HasKey("ArtWorksId", "TagsArtTagId");

                    b.HasIndex("TagsArtTagId");

                    b.ToTable("ArtTagArtWork");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "bcd8095a-f92f-4666-97d6-91a032ee27b5",
                            ConcurrencyStamp = "5519d282-94b3-44b6-8704-afeccec7d1e9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "726ce49e-a47c-4715-98c7-e3c943db1c3e",
                            ConcurrencyStamp = "53e88b1b-c44d-4bb7-abe7-91b8148e18fb",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "8805cf28-dd66-46eb-967d-085e00e4a6b1",
                            ConcurrencyStamp = "06f88c2a-54d0-495a-881e-4aeb78327763",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "63e79bc9-8b92-4d5b-84ff-f543b8a0f620",
                            RoleId = "bcd8095a-f92f-4666-97d6-91a032ee27b5"
                        },
                        new
                        {
                            UserId = "2f2ae47c-998e-4f21-b906-ca01ee340908",
                            RoleId = "8805cf28-dd66-46eb-967d-085e00e4a6b1"
                        },
                        new
                        {
                            UserId = "4f12a2cd-bf66-495b-ac86-dd52a27ed35d",
                            RoleId = "8805cf28-dd66-46eb-967d-085e00e4a6b1"
                        },
                        new
                        {
                            UserId = "6c147f60-d2aa-4781-a562-fc663a438b8d",
                            RoleId = "726ce49e-a47c-4715-98c7-e3c943db1c3e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SharedData.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("ShortStatus")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "63e79bc9-8b92-4d5b-84ff-f543b8a0f620",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4d01129-824f-4db0-aa17-5b5da1fae9ea",
                            DisplayName = "User1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMScFuvvP2KzYT5N0BS2DiNx+rNxWwieWNUt/0kH1oFXiTXBEqeCLEJdGIAJsiyMaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = "2f2ae47c-998e-4f21-b906-ca01ee340908",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93d3c99c-52a5-4c02-a6eb-c95a3bff949a",
                            DisplayName = "User2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEKhQ2c4ewRLwgNr/ZbJf+h4OvqOjBpmHBXREbJGNz4yXLzGOFuN6JKtih75oOFcsKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = "4f12a2cd-bf66-495b-ac86-dd52a27ed35d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d0b211d-b6ed-4d5a-9072-2743e2711235",
                            DisplayName = "User3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEFHGb4HN4PgMzGvUMws1Gu8h1MpXN/9AYN8/RBvLnwxKB3jiHyMUQk+aLP2MX5UDMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = "6c147f60-d2aa-4781-a562-fc663a438b8d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d851efb6-d6e5-4eef-9577-6a07e685cc6c",
                            DisplayName = "User4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAEPT/txEf9r0RvMGEIHt3XScstoAuX7IetkNCnkkgaRFiojenxtnQZrfMlgFW1gwtEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        });
                });

            modelBuilder.Entity("SharedData.ArtTag", b =>
                {
                    b.Property<int>("ArtTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.HasKey("ArtTagId");

                    b.ToTable("ArtTags");

                    b.HasData(
                        new
                        {
                            ArtTagId = 1,
                            Description = "Арт-реализм",
                            Label = "Арт-реализм"
                        },
                        new
                        {
                            ArtTagId = 2,
                            Description = "Арт-фэнтези",
                            Label = "Арт-фэнтези"
                        },
                        new
                        {
                            ArtTagId = 3,
                            Description = "Арт-киберпанк",
                            Label = "Арт-киберпанк"
                        },
                        new
                        {
                            ArtTagId = 4,
                            Description = "Арт-другое",
                            Label = "Арт-другое"
                        },
                        new
                        {
                            ArtTagId = 5,
                            Description = "Оформление-ярко",
                            Label = "Оформление-ярко"
                        },
                        new
                        {
                            ArtTagId = 6,
                            Description = "Оформление-минимализм",
                            Label = "Оформление-минимализм"
                        },
                        new
                        {
                            ArtTagId = 7,
                            Description = "Оформление-YT/Twitch",
                            Label = "Оформление-YT/Twitch"
                        },
                        new
                        {
                            ArtTagId = 8,
                            Description = "Оформление-Inst/Twitter",
                            Label = "Оформление-Inst/Twitter"
                        });
                });

            modelBuilder.Entity("SharedData.ArtWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArtState")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("SharedData.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArtId")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorId1")
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionFromCustomer")
                        .HasColumnType("text");

                    b.Property<bool>("IsOver")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("ReviewFromCustomer")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.HasIndex("ArtId")
                        .IsUnique();

                    b.HasIndex("AuthorId1");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SharedData.TestModel.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArtTagId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("AnswerId");

                    b.HasIndex("ArtTagId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            ArtTagId = 1,
                            QuestionId = 1,
                            Rate = 3,
                            Text = "Ответ в пользу первого тега"
                        },
                        new
                        {
                            AnswerId = 2,
                            ArtTagId = 2,
                            QuestionId = 1,
                            Rate = 4,
                            Text = "Ответ в пользу второго тега"
                        },
                        new
                        {
                            AnswerId = 3,
                            ArtTagId = 3,
                            QuestionId = 1,
                            Rate = 2,
                            Text = "Ответ в пользу третьего тега"
                        },
                        new
                        {
                            AnswerId = 4,
                            ArtTagId = 4,
                            QuestionId = 1,
                            Rate = 4,
                            Text = "Ответ в пользу четвертого тега"
                        });
                });

            modelBuilder.Entity("SharedData.TestModel.AnswerResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("TestResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("TestResultId");

                    b.ToTable("AnswerResult");
                });

            modelBuilder.Entity("SharedData.TestModel.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            TestId = 1,
                            Text = "Первый вопрос"
                        });
                });

            modelBuilder.Entity("SharedData.TestModel.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Тестовый тест",
                            Label = "Теста намба ван"
                        });
                });

            modelBuilder.Entity("SharedData.TestModel.TestResult", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsEnded")
                        .HasColumnType("boolean");

                    b.Property<string>("SuggestedAuthorId")
                        .HasColumnType("text");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("TestedUserId")
                        .HasColumnType("text");

                    b.HasKey("TestResultId");

                    b.HasIndex("SuggestedAuthorId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestedUserId");

                    b.ToTable("TestResult");
                });

            modelBuilder.Entity("SharedData.UserArtTag", b =>
                {
                    b.Property<int>("UserArtTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<int>("ArtTagId")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.HasKey("UserArtTagId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtTagId");

                    b.ToTable("UserArtTag");

                    b.HasData(
                        new
                        {
                            UserArtTagId = 1,
                            ApplicationUserId = "63e79bc9-8b92-4d5b-84ff-f543b8a0f620",
                            ArtTagId = 1,
                            Rate = 4
                        },
                        new
                        {
                            UserArtTagId = 2,
                            ApplicationUserId = "2f2ae47c-998e-4f21-b906-ca01ee340908",
                            ArtTagId = 2,
                            Rate = 4
                        },
                        new
                        {
                            UserArtTagId = 3,
                            ApplicationUserId = "2f2ae47c-998e-4f21-b906-ca01ee340908",
                            ArtTagId = 3,
                            Rate = 4
                        },
                        new
                        {
                            UserArtTagId = 4,
                            ApplicationUserId = "4f12a2cd-bf66-495b-ac86-dd52a27ed35d",
                            ArtTagId = 4,
                            Rate = 4
                        });
                });

            modelBuilder.Entity("ArtTagArtWork", b =>
                {
                    b.HasOne("SharedData.ArtWork", null)
                        .WithMany()
                        .HasForeignKey("ArtWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedData.ArtTag", null)
                        .WithMany()
                        .HasForeignKey("TagsArtTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SharedData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SharedData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SharedData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedData.ArtWork", b =>
                {
                    b.HasOne("SharedData.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SharedData.Order", b =>
                {
                    b.HasOne("SharedData.ArtWork", "Art")
                        .WithOne("Order")
                        .HasForeignKey("SharedData.Order", "ArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedData.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId1");

                    b.HasOne("SharedData.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.Navigation("Art");

                    b.Navigation("Author");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SharedData.TestModel.Answer", b =>
                {
                    b.HasOne("SharedData.ArtTag", "ArtTag")
                        .WithMany()
                        .HasForeignKey("ArtTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedData.TestModel.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtTag");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SharedData.TestModel.AnswerResult", b =>
                {
                    b.HasOne("SharedData.TestModel.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("SharedData.TestModel.TestResult", null)
                        .WithMany("AnswerResults")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("SharedData.TestModel.Question", b =>
                {
                    b.HasOne("SharedData.TestModel.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SharedData.TestModel.TestResult", b =>
                {
                    b.HasOne("SharedData.ApplicationUser", "SuggestedAuthor")
                        .WithMany()
                        .HasForeignKey("SuggestedAuthorId");

                    b.HasOne("SharedData.TestModel.Test", "Test")
                        .WithMany("Results")
                        .HasForeignKey("TestId");

                    b.HasOne("SharedData.ApplicationUser", "TestedUser")
                        .WithMany()
                        .HasForeignKey("TestedUserId");

                    b.Navigation("SuggestedAuthor");

                    b.Navigation("Test");

                    b.Navigation("TestedUser");
                });

            modelBuilder.Entity("SharedData.UserArtTag", b =>
                {
                    b.HasOne("SharedData.ApplicationUser", null)
                        .WithMany("Tags")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SharedData.ArtTag", "ArtTag")
                        .WithMany()
                        .HasForeignKey("ArtTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtTag");
                });

            modelBuilder.Entity("SharedData.ApplicationUser", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SharedData.ArtWork", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("SharedData.TestModel.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SharedData.TestModel.Test", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("SharedData.TestModel.TestResult", b =>
                {
                    b.Navigation("AnswerResults");
                });
#pragma warning restore 612, 618
        }
    }
}
